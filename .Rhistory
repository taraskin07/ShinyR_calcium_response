}
}
end_time <- Sys.time()
elapsed_time <- end_time - start_time
print(elapsed_time)
return(CCF_matrix)
}
lag_values_df2 <- CCF_matrix2(
reactive_df_to_shift,
lower = 120,
upper = 330,
max_lag = 30
)
# Shifting curves (CCF)
CCF_matrix2 <- function(df_to_shift, lower, upper, max_lag) {
start_time <- Sys.time()
# Correcting Time column if not Time and not first in the dataframe
df_time <- time_col_name(df_to_shift, name_only = T)
# Subsetting according the range (lower-upper)
subset_timerange <-
as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
# Creating CCF matrix
CCF_matrix = matrix(
numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange)
)
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
count <- 0
len <- length(colnames(subset_timerange))
for (i in 1:ncol(subset_timerange)) {
columnName <- colnames(subset_timerange)[[i]]
count <- count + 1
for (j in i:nrow(subset_timerange)) {
rowName <- colnames(subset_timerange)[[j]]
mtrx <- ccf(
subset_timerange[columnName],
subset_timerange[rowName],
lag.max = max_lag,
na.action = na.omit,
plot = FALSE
)
data_table <- data.frame(ACF = mtrx$acf, Lag = mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
}
}
end_time <- Sys.time()
elapsed_time <- end_time - start_time
print(elapsed_time)
return(CCF_matrix)
}
lag_values_df2 <- CCF_matrix2(
reactive_df_to_shift,
lower = 120,
upper = 330,
max_lag = 30
)
View(lag_values_df)
View(lag_values_df2)
write_xlsx(lag_values_df, 'lag1.xlsx')
write_xlsx(as.data.frame(lag_values_df), 'lag1.xlsx')
write_xlsx(as.data.frame(lag_values_df2), 'lag2.xlsx')
# Shifting curves (CCF)
CCF_matrix2 <- function(df_to_shift, lower, upper, max_lag) {
start_time <- Sys.time()
# Correcting Time column if not Time and not first in the dataframe
df_time <- time_col_name(df_to_shift, name_only = T)
# Subsetting according the range (lower-upper)
subset_timerange <-
as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
# Creating CCF matrix
CCF_matrix = matrix(
numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange)
)
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
count <- 0
len <- length(colnames(subset_timerange))
for (i in 1:ncol(subset_timerange)) {
columnName <- colnames(subset_timerange)[[i]]
count <- count + 1
for (j in i:ncol(subset_timerange)) {
rowName <- colnames(subset_timerange)[[j]]
mtrx <- ccf(
subset_timerange[columnName],
subset_timerange[rowName],
lag.max = max_lag,
na.action = na.omit,
plot = FALSE
)
data_table <- data.frame(ACF = mtrx$acf, Lag = mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
}
}
end_time <- Sys.time()
elapsed_time <- end_time - start_time
print(elapsed_time)
return(CCF_matrix)
}
lag_values_df2 <- CCF_matrix2(
reactive_df_to_shift,
lower = 120,
upper = 330,
max_lag = 30
)
rownames(lag_values_df)
lag1 <- as.data.frame(lag_values_df)
rownames(lag1) <- rownames(lag_values_df)
write_xlsx(lag1, 'lag1.xlsx')
lag2 <- as.data.frame(lag_values_df2)
rownames(lag2) <- rownames(lag_values_df2)
write_xlsx(lag2, 'lag2.xlsx')
lag1 <- as.data.frame(lag_values_df)
rownames(lag1) <- rownames(lag_values_df)
write.xlsx(lag1, 'lag1.xlsx', rowNames = T)
lag2 <- as.data.frame(lag_values_df2)
rownames(lag2) <- rownames(lag_values_df2)
write.xlsx(lag2, 'lag2.xlsx', rowNames = T)
lag_values_df == lag_values_df2
identical(lag_values_df, lag_values_df2)
# Shifting curves (CCF)
CCF_matrix2 <- function(df_to_shift, lower, upper, max_lag) {
start_time <- Sys.time()
# Correcting Time column if not Time and not first in the dataframe
df_time <- time_col_name(df_to_shift, name_only = T)
# Subsetting according the range (lower-upper)
subset_timerange <-
as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
# Creating CCF matrix
CCF_matrix = matrix(
numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange)
)
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
count <- 0
len <- length(colnames(subset_timerange))
for (i in 1:ncol(subset_timerange)) {
columnName <- colnames(subset_timerange)[[i]]
count <- count + 1
for (j in i:ncol(subset_timerange)) {
rowName <- colnames(subset_timerange)[[j]]
if (j == i) {
CCF_matrix[rowName, columnName] = 0
} else {
mtrx <- ccf(
subset_timerange[columnName],
subset_timerange[rowName],
lag.max = max_lag,
na.action = na.omit,
plot = FALSE
)
data_table <- data.frame(ACF = mtrx$acf, Lag = mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
CCF_matrix[columnName, rowName] = -lag_for_max_acf
}
}
}
end_time <- Sys.time()
elapsed_time <- end_time - start_time
print(elapsed_time)
return(CCF_matrix)
}
lag_values_df2 <- CCF_matrix2(
reactive_df_to_shift,
lower = 120,
upper = 330,
max_lag = 30
)
identical(lag_values_df, lag_values_df2)
source("~/Rprojects/calcium_imaging_v2/engine.R")
source("~/Rprojects/calcium_imaging_v2/engine.R")
lag1 <- as.data.frame(lag_values_df)
rownames(lag1) <- rownames(lag_values_df)
write.xlsx(lag1, 'lag1.xlsx', rowNames = T)
lag2 <- as.data.frame(lag_values_df2)
rownames(lag2) <- rownames(lag_values_df2)
write.xlsx(lag2, 'lag2.xlsx', rowNames = T)
lag1 <- as.data.frame(lag_values_df)
rownames(lag1) <- rownames(lag_values_df)
write.xlsx(lag1, 'lag1.xlsx', rowNames = T)
lag2 <- as.data.frame(lag_values_df2)
rownames(lag2) <- rownames(lag_values_df2)
write.xlsx(lag2, 'lag2.xlsx', rowNames = T)
runApp()
source("~/Rprojects/calcium_imaging_v2/engine.R")
empty_at_the_start <- read_excel("~/Current/CA Imaging checkpoints_V2/2023-04-29/10mM_LiCl_No_Shaking_no_AVP/processed/CleanTable/2023-04-29-mpkCCD004-CleanTable.xlsx",
sheet = "Ratio")
# Shifting curves (CCF)
CCF_matrix2 <- function(df_to_shift, lower, upper, max_lag) {
start_time <- Sys.time()
# Correcting Time column if not Time and not first in the dataframe
df_time <- time_col_name(df_to_shift, name_only = T)
# Subsetting according the range (lower-upper)
subset_timerange <-
as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
# Creating CCF matrix
CCF_matrix = matrix(
numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange)
)
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
count <- 0
len <- length(colnames(subset_timerange))
for (i in 1:ncol(subset_timerange)) {
columnName <- colnames(subset_timerange)[[i]]
count <- count + 1
for (j in i:ncol(subset_timerange)) {
rowName <- colnames(subset_timerange)[[j]]
if (j == i) {
CCF_matrix[rowName, columnName] = 0
} else {
mtrx <- ccf(
subset_timerange[columnName],
subset_timerange[rowName],
lag.max = max_lag,
na.action = na.omit,
plot = FALSE
)
data_table <- data.frame(ACF = mtrx$acf, Lag = mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
CCF_matrix[columnName, rowName] = -lag_for_max_acf
}
}
}
end_time <- Sys.time()
elapsed_time <- end_time - start_time
print(elapsed_time)
return(CCF_matrix)
}
lag_values_df <- CCF_matrix2(
reactive_df_to_shift,
lower = 120,
upper = 330,
max_lag = 30
)
dtout <- shift_with_CCF(empty_at_the_start, lag_values_df, 30)
df_time <- time_col_name(empty_at_the_start, name_only = T)
CCF_matrix <- lag_values_df
max(CCF_matrix)
min(CCF_matrix)
empty_at_the_start <- read_excel("~/Current/CA Imaging checkpoints_V2/2023-04-29/10mM_LiCl_No_Shaking_no_AVP/processed/CleanTable/2023-04-29-mpkCCD004-CleanTable.xlsx",
sheet = "Ratio")
View(lag_values_df)
max(CCF_matrix)
which.max(CCF_matrix)
CCF_matrix[which.max(CCF_matrix)]
# Known index
single_index <- which.max(CCF_matrix)
# Find row and column names
matrix_dim <- dim(CCF_matrix)
num_rows <- matrix_dim[1]
num_cols <- matrix_dim[2]
row_index <- (single_index - 1) %/% num_cols + 1
col_index <- (single_index - 1) %% num_cols + 1
row_index <- (single_index - 1) %/% num_cols + 1
col_index <- (single_index - 1) %% num_cols + 1
row_name <- rownames(CCF_matrix)[row_index]
col_name <- colnames(CCF_matrix)[col_index]
row_name
col_name
column_sums <- colSums(CCF_matrix)
left_trace_column <- names(which(column_sums == min(column_sums)))[[1]]
left_trace_column
min_column_sums
min_column_sums <- min(column_sums)
min_column_sums
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[nm, left_trace_column])
}
colnames(df_time)
colnames(df_time)[-1]
for (nm in colnames(df_time)[-1]) {print(nm)}
for (nm in colnames(df_time)[-1]) {print(n= CCF_matrix[nm, left_trace_column])}
print(n)}
for (nm in colnames(df_time)[-1]) {
n = CCF_matrix[nm, left_trace_column]
Print(n)}
for (nm in colnames(df_time)[-1]) {
n = CCF_matrix[nm, left_trace_column]
print(n)
}
left_trace_column
for (nm in colnames(df_time)[-1]) {
n = CCF_matrix[nm, left_trace_column]
print(nm)
}
for (nm in colnames(df_time)[-1]) {
# n = CCF_matrix[nm, left_trace_column]
print(nm)
}
for (nm in colnames(df_time)[-1]) {
n = CCF_matrix[nm, left_trace_column]
print(nm)
}
CCF_matrix["cell-030", left_trace_column]
View(CCF_matrix)
empty_at_the_start <- read_excel("~/Current/CA Imaging checkpoints_V2/2023-04-29/10mM_LiCl_No_Shaking_no_AVP/processed/CleanTable/2023-04-29-mpkCCD004-CleanTable.xlsx",
sheet = "Ratio")
View(empty_at_the_start)
empty_at_the_start
empty_at_the_start <- read_excel("~/Current/CA Imaging checkpoints_V2/2023-04-29/10mM_LiCl_No_Shaking_no_AVP/processed/CleanTable/2023-04-29-mpkCCD004-CleanTable.xlsx",
sheet = "Ratio")
lag_values_df <- CCF_matrix2(
empty_at_the_start,
lower = 120,
upper = 330,
max_lag = 30
)
df_time <- time_col_name(empty_at_the_start, name_only = T)
CCF_matrix <- lag_values_df
max(CCF_matrix)
# Known index
single_index <- which.max(CCF_matrix)
single_index
# Find row and column names
matrix_dim <- dim(CCF_matrix)
num_rows <- matrix_dim[1]
num_cols <- matrix_dim[2]
row_index <- (single_index - 1) %/% num_cols + 1
col_index <- (single_index - 1) %% num_cols + 1
row_name <- rownames(CCF_matrix)[row_index]
row_name
col_name <- colnames(CCF_matrix)[col_index]
col_name
column_sums <- colSums(CCF_matrix)
left_trace_column <- names(which(column_sums == min(column_sums)))[[1]]
left_trace_column
min_column_sums <- min(column_sums)
min_column_sums
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[nm, left_trace_column])
}
View(df_time)
# Known index
single_index <- which.min(CCF_matrix)
single_index
# Find row and column names
matrix_dim <- dim(CCF_matrix)
num_rows <- matrix_dim[1]
num_cols <- matrix_dim[2]
row_index <- (single_index - 1) %/% num_cols + 1
col_index <- (single_index - 1) %% num_cols + 1
row_name <- rownames(CCF_matrix)[row_index]
row_name
col_name <- colnames(CCF_matrix)[col_index]
col_name
column_sums <- colSums(CCF_matrix)
left_trace_column <- names(which(column_sums == min(column_sums)))[[1]]
left_trace_column
for (nm in colnames(df_time)[-1]) {
n = CCF_matrix[nm, left_trace_column]
print(n)
}
negative_zero_cols <- colnames(CCF_matrix)[colSums(CCF_matrix >= 0) == 0]
negative_zero_cols
named_list <- list()
for (nm in colnames(df_time)[-1]) {
n = CCF_matrix[nm, left_trace_column]
named_list[[nm]] <- n
}
named_list
max(named_list)
max(unlist(named_list))
max_shift <- max(unlist(named_list))
list_subtracted <- lapply(named_list, function(x) x - max_shift)
list_subtracted
source("~/Rprojects/calcium_imaging_v2/engine.R")
source("~/Rprojects/calcium_imaging_v2/engine.R")
source("~/Rprojects/calcium_imaging_v2/engine.R")
runApp()
runApp()
runApp()
source("~/Rprojects/calcium_imaging_v2/engine.R")
runApp()
source("~/Rprojects/calcium_imaging_v2/engine.R")
runApp()
runApp()
reactive_df_to_shift <- read_excel("~/Current/CA Imaging checkpoints_V2/2023-04-28/No_Shaking_no_AVP/processed/CleanTable/2023-04-28-mpkCCD001-CleanTable.xlsx",
sheet = "Ratio")
empty_at_the_start <- read_excel("~/Current/CA Imaging checkpoints_V2/2023-04-29/10mM_LiCl_No_Shaking_no_AVP/processed/CleanTable/2023-04-29-mpkCCD004-CleanTable.xlsx",
sheet = "Ratio")
# Shifting curves (CCF)
CCF_matrix <- function(df_to_shift, lower, upper, max_lag) {
start_time <- Sys.time()
# Correcting Time column if not Time and not first in the dataframe
df_time <- time_col_name(df_to_shift, name_only = T)
# Subsetting according the range (lower-upper)
subset_timerange <-
as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
# Creating CCF matrix
CCF_matrix = matrix(
numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange)
)
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
# For shiny R only
# withProgress(message = "Calculating...", value = 0, {
count <- 0
len <- length(colnames(subset_timerange))
for (columnName in colnames(subset_timerange)) {
count <- count + 1
for (rowName in colnames(subset_timerange)) {
mtrx <- ccf(
subset_timerange[columnName],
subset_timerange[rowName],
lag.max = max_lag,
na.action = na.omit,
plot = FALSE
)
data_table <- data.frame(ACF = mtrx$acf, Lag = mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
}
# For shiny R only
# incProgress(1 / len, detail = paste("Processing trace", count))
}
# })
end_time <- Sys.time()
elapsed_time <- end_time - start_time
print(elapsed_time)
return(CCF_matrix)
}
# Shifting curves (CCF)
CCF_matrix2 <- function(df_to_shift, lower, upper, max_lag) {
start_time <- Sys.time()
# Correcting Time column if not Time and not first in the dataframe
df_time <- time_col_name(df_to_shift, name_only = T)
# Subsetting according the range (lower-upper)
subset_timerange <-
as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
# Creating CCF matrix
CCF_matrix = matrix(
numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange)
)
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
count <- 0
len <- length(colnames(subset_timerange))
for (i in 1:ncol(subset_timerange)) {
columnName <- colnames(subset_timerange)[[i]]
count <- count + 1
for (j in i:ncol(subset_timerange)) {
rowName <- colnames(subset_timerange)[[j]]
if (j == i) {
CCF_matrix[rowName, columnName] = 0
} else {
mtrx <- ccf(
subset_timerange[columnName],
subset_timerange[rowName],
lag.max = max_lag,
na.action = na.omit,
plot = FALSE
)
data_table <- data.frame(ACF = mtrx$acf, Lag = mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
CCF_matrix[columnName, rowName] = -lag_for_max_acf
}
}
}
end_time <- Sys.time()
elapsed_time <- end_time - start_time
print(elapsed_time)
return(CCF_matrix)
}
reactive_df_to_shift <- empty_at_the_start
lag_values_df <- CCF_matrix(
reactive_df_to_shift,
lower = 120,
upper = 330,
max_lag = 30
)
lag_values_df2 <- CCF_matrix2(
reactive_df_to_shift,
lower = 120,
upper = 330,
max_lag = 30
)
identical(lag_values_df, lag_values_df2)
runApp()
shiny::runApp()
source("~/Rprojects/calcium_imaging_v2/engine.R")
source("~/Rprojects/calcium_imaging_v2/engine.R")
runApp()
shinytest::recordTest("~/Rprojects/calcium_imaging_v2")
source("~/Rprojects/calcium_imaging_v2/engine.R")
library(formatR)
remove.packages("formatR", lib="~/Rprojects/calcium_imaging_v2/renv/library/R-4.2/x86_64-w64-mingw32")
renv.status()
renv::status()
source("~/Rprojects/calcium_imaging_v2/engine.R")
renv::status()
remove.packages("formatR")
renv::snapshot()
renv::dependencies()
