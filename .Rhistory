}
ggplotly_render(df_time,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
if (min(column_sums) <= min(row_sums)) {
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[nm, left_trace_column])}
} else {
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])}
}
min_column_sums <- min(column_sums)
min_row_sum <- min(row_sums)
min_column_sums
min_row_sum
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])}
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])}
for (nm in colnames(df_time)[-1]) {
for (nm in colnames(df_time)[-1]) {
for (nm in colnames(df_time)[-1]) {
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])
print(nm)
print(left_trace_row)
}
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])
print(nm)
print(left_trace_row)
df_time[[nm]]
}
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])
print(nm)
print(left_trace_row)
print(df_time[[nm]])
}
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])
print(nm)
print(left_trace_row)
print(n)
}
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[[left_trace_row, nm]])
print(nm)
print(left_trace_row)
print(CCF_matrix[[left_trace_row, nm]])
}
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[[left_trace_row, nm]])
print(nm)
print(left_trace_row)
print(CCF_matrix[left_trace_row, nm])
}
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
colorPalette <- randomColor(count = 2000, hue = 'random', luminosity = 'bright')
# PART
df_to_shift <- all_cells2_CleanTable[, c('Time',
'cell-042',
'cell-039',
'cell-049',
'cell-088',
'cell-117',
'cell-195',
'cell-228')]
lower <- 170
upper <- 785
max_lag <- 100
df_time <- time_col_name(df_to_shift, name_only = T)
subset_timerange <- as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
CCF_matrix <- matrix(numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange))
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
for (columnName in colnames(subset_timerange)) {
for (rowName in colnames(subset_timerange)) {
mtrx <- ccf(subset_timerange[columnName], subset_timerange[rowName], lag.max = max_lag, na.action=na.omit, plot=FALSE)
data_table <- data.frame(ACF=mtrx$acf, Lag=mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
}
}
View(CCF_matrix)
CCF_matrix = matrix(numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange))
lower <- 170
upper <- 785
max_lag <- 100
df_time <- time_col_name(df_to_shift, name_only = T)
source("~/Rprojects/calcium_imaging_v2/engine.R")
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
colorPalette <- randomColor(count = 2000, hue = 'random', luminosity = 'bright')
# PART
df_to_shift <- all_cells2_CleanTable[, c('Time',
'cell-042',
'cell-039',
'cell-049',
'cell-088',
'cell-117',
'cell-195',
'cell-228')]
lower <- 170
upper <- 785
max_lag <- 100
df_time <- time_col_name(df_to_shift, name_only = T)
source("~/Rprojects/calcium_imaging_v2/engine.R")
df_time <- time_col_name(df_to_shift, name_only = T)
subset_timerange <- as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
CCF_matrix = matrix(numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange))
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
View(CCF_matrix)
for (columnName in colnames(subset_timerange)) {
for (rowName in colnames(subset_timerange)) {
mtrx <- ccf(subset_timerange[columnName], subset_timerange[rowName], lag.max = max_lag, na.action=na.omit, plot=FALSE)
data_table <- data.frame(ACF=mtrx$acf, Lag=mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
}
}
which(CCF_matrix == min(CCF_matrix), arr.ind = TRUE)
column_sums <- colSums(CCF_matrix)
column_sums
row_sums <- rowSums(CCF_matrix)
row_sums
left_trace_column <- names(which(column_sums == min(column_sums)))
left_trace_row <- names(which(row_sums == min(row_sums)))
left_trace_column
left_trace_row
min_column_sums <- min(column_sums)
min_row_sum <- min(row_sums)
min_column_sums
min_row_sum
if (min(column_sums) <= min(row_sums)) {
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[nm, left_trace_column])}
} else {
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])}
}
ggplotly_render(df_time,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
shift_to_match_maximum <- function(df_to_shift) {
# Generating list of indexes = response-specific maximums by custom function
list_of_ids <- finding_local_maximum(df_to_shift)
# Establishing the earliest maximum among all the traces
lowest_value <- min(unlist(list_of_ids))
# And its name
trace_name <- names(which.min(unlist(list_of_ids)))
# Creating list of lag values as compared to the one with the earliest maximum
difference <- sapply(list_of_ids, function(x) x-lowest_value)
print(difference)
for (element in names(difference)) {
df_to_shift[[element]] <- shift(df_to_shift[[element]],
n=difference[[element]],
type = 'lead')
}
return(df_to_shift)
}
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
# PART
df_to_shift <- all_cells2_CleanTable[, c('Time',
'cell-042',
'cell-039',
'cell-049',
'cell-088',
'cell-117',
'cell-195',
'cell-228')]
shift_to_match_maximum(df_to_shift)
ggplotly_render(df_to_shift,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
lower <- 170
upper <- 785
max_lag <- 100
df_time <- time_col_name(df_to_shift, name_only = T)
subset_timerange <- as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
CCF_matrix = matrix(numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange))
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
View(CCF_matrix)
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
all <- ggplotly_render(all_cells2_CleanTable,
rcolor = color_palette(all_cells2_CleanTable, colorPalette),
sorting = 'Native')
all
cell042 <- display_single_plot(all_cells2_CleanTable, 'cell-042')
cell042
cell049 <- display_single_plot(all_cells2_CleanTable, 'cell-049')
cell049
cell088 <- display_single_plot(all_cells2_CleanTable, 'cell-088')
cell088
cell117 <- display_single_plot(all_cells2_CleanTable, 'cell-117')
cell117
cell195 <- display_single_plot(all_cells2_CleanTable, 'cell-195')
cell195
cell228 <- display_single_plot(all_cells2_CleanTable, 'cell-228')
cell228
cell039 <- display_single_plot(all_cells2_CleanTable, 'cell-039')
cell039
# PART
df_to_shift <- all_cells2_CleanTable[, c('Time',
'cell-042',
'cell-039',
'cell-049',
'cell-088',
'cell-117',
'cell-195',
'cell-228')]
ggplotly_render(df_to_shift,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
lower <- 170
upper <- 785
max_lag <- 100
df_time <- time_col_name(df_to_shift, name_only = T)
subset_timerange <- as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
CCF_matrix = matrix(numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange))
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
View(CCF_matrix)
for (columnName in colnames(subset_timerange)) {
for (rowName in colnames(subset_timerange)) {
mtrx <- ccf(subset_timerange[columnName],
subset_timerange[rowName],
lag.max = max_lag,
na.action=na.omit,
plot=FALSE)
data_table <- data.frame(ACF=mtrx$acf, Lag=mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
}
}
View(CCF_matrix)
if (max(CCF_matrix) == max_lag) {
print('Lag value for some trace is the same as the maximum lag value entered!
You should consider to increase the maximum lag value or use another algorithm at first!')
}
column_sums <- colSums(CCF_matrix)
column_sums
row_sums <- rowSums(CCF_matrix)
row_sums
row_sums
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])}
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[left_trace_row, nm])
}
ggplotly_render(df_time,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
column_sums <- colSums(CCF_matrix)
column_sums
left_trace_column <- names(which(column_sums == min(column_sums)))
left_trace_column
min_column_sums <- min(column_sums)
min_row_sum <- min(row_sums)
min_column_sums
min_row_sum
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[nm, left_trace_column])
}
ggplotly_render(df_time,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
all <- ggplotly_render(all_cells2_CleanTable,
rcolor = color_palette(all_cells2_CleanTable, colorPalette),
sorting = 'Native')
all
# PART
df_to_shift <- all_cells2_CleanTable[, c('Time',
'cell-042',
'cell-039',
'cell-049',
'cell-088',
'cell-117',
'cell-195',
'cell-228')]
lower <- 170
upper <- 785
max_lag <- 100
df_time <- time_col_name(df_to_shift, name_only = T)
subset_timerange <- as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
CCF_matrix = matrix(numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange))
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
View(CCF_matrix)
for (columnName in colnames(subset_timerange)) {
for (rowName in colnames(subset_timerange)) {
mtrx <- ccf(subset_timerange[columnName],
subset_timerange[rowName],
lag.max = max_lag,
na.action=na.omit,
plot=FALSE)
data_table <- data.frame(ACF=mtrx$acf, Lag=mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
}
}
View(CCF_matrix)
which(CCF_matrix == min(CCF_matrix), arr.ind = TRUE)
column_sums <- colSums(CCF_matrix)
column_sums
left_trace_column <- names(which(column_sums == min(column_sums)))
left_trace_column
min_column_sums <- min(column_sums)
min_column_sums
left_trace_column
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[nm, left_trace_column])
}
ggplotly_render(df_time,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
source("~/Rprojects/calcium_imaging_v2/engine.R")
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
colorPalette <- randomColor(count = 2000, hue = 'random', luminosity = 'bright')
all <- ggplotly_render(all_cells2_CleanTable,
rcolor = color_palette(all_cells2_CleanTable, colorPalette),
sorting = 'Native')
all
# PART
df_to_shift <- all_cells2_CleanTable[, c('Time',
'cell-042',
'cell-039',
'cell-049',
'cell-088',
'cell-117',
'cell-195',
'cell-228')]
ggplotly_render(df_to_shift,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
lower <- 170
upper <- 785
max_lag <- 100
df_time <- time_col_name(df_to_shift, name_only = T)
subset_timerange <- as.data.frame(subset(df_time, (Time >= lower & Time <= upper)))[-1]
CCF_matrix = matrix(numeric(),
nrow = ncol(subset_timerange),
ncol = ncol(subset_timerange))
rownames(CCF_matrix) = colnames(subset_timerange)
colnames(CCF_matrix) = colnames(subset_timerange)
View(CCF_matrix)
for (columnName in colnames(subset_timerange)) {
for (rowName in colnames(subset_timerange)) {
mtrx <- ccf(subset_timerange[columnName],
subset_timerange[rowName],
lag.max = max_lag,
na.action=na.omit,
plot=FALSE)
data_table <- data.frame(ACF=mtrx$acf, Lag=mtrx$lag)
lag_for_max_acf <- data_table$Lag[which.max(data_table$ACF)]
CCF_matrix[rowName, columnName] = lag_for_max_acf
}
}
View(CCF_matrix)
which(CCF_matrix == min(CCF_matrix), arr.ind = TRUE)
if (max(CCF_matrix) == max_lag) {
print('Lag value for some trace is the same as the maximum lag value entered!
You should consider to increase the maximum lag value or use another algorithm at first!')
}
column_sums <- colSums(CCF_matrix)
column_sums <- colSums(CCF_matrix)
column_sums
column_sums <- colSums(CCF_matrix)
column_sums
left_trace_column <- names(which(column_sums == min(column_sums)))
left_trace_column
min_column_sums <- min(column_sums)
min_column_sums
for (nm in colnames(df_time)[-1]) {
df_time[[nm]] <- shift(df_time[[nm]],
n = CCF_matrix[nm, left_trace_column])
}
ggplotly_render(df_time,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
aver3 <- average_curve(df_time)
ggplotly_render(aver3)
source("~/Rprojects/calcium_imaging_v2/engine.R")
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
dt_to_shift <- all_cells2_CleanTable
dt_to_shift <- shift_with_CCF(all_cells2_CleanTable)
dt_to_shift <- shift_with_CCF(all_cells2_CleanTable, lower, upper, max_lag)
lower <- 170
upper <- 785
max_lag <- 100
dt_to_shift <- shift_with_CCF(all_cells2_CleanTable, lower, upper, max_lag)
source("~/Rprojects/calcium_imaging_v2/engine.R")
lower <- 170
upper <- 785
max_lag <- 100
dt_to_shift <- shift_with_CCF(all_cells2_CleanTable, lower, upper, max_lag)
ggplotly_render(dt_to_shift,
rcolor = color_palette(dt_to_shift, colorPalette),
sorting = 'Native')
averCCF <- average_curve(dt_to_shift)
ggplotly_render(averCCF)
df_to_shift <- shift_to_match_maximum(all_cells2_CleanTable)
# MAXIMUMS
ggplotly_render(df_to_shift,
rcolor = color_palette(df_to_shift, colorPalette),
sorting = 'Native')
averMax <- average_curve(df_to_shift)
ggplotly_render(averMax)
averCCF <- average_curve(dt_to_shift)
ggplotly_render(averCCF)
ggplotly_render(averMax)
ggplotly_render(averCCF)
df_to_shift2 <- shift_with_CCF(df_to_shift, lower, upper, max_lag = 5)
df_to_shift2 <- shift_with_CCF(df_to_shift, lower, upper, max_lag = 10)
df_to_shift2 <- shift_with_CCF(df_to_shift, lower, upper, max_lag = 20)
# CCF
ggplotly_render(dt_to_shift,
rcolor = color_palette(dt_to_shift, colorPalette),
sorting = 'Native')
df_to_shift2 <- shift_with_CCF(df_to_shift, lower, upper, max_lag = 50)
ggplotly_render(dt_to_shift2,
rcolor = color_palette(dt_to_shift2, colorPalette),
sorting = 'Native')
ggplotly_render(df_to_shift2,
rcolor = color_palette(df_to_shift2, colorPalette),
sorting = 'Native')
averCCF2 <- average_curve(df_to_shift2)
ggplotly_render(averCCF2)
ggplotly_render(averMax)
averCCF <- average_curve(dt_to_shift)
ggplotly_render(averCCF)
ggplotly_render(averCCF2)
ggplotly_render(averCCF)
ggplotly_render(averCCF2)
source("~/Rprojects/calcium_imaging_v2/engine.R")
all_cells2_CleanTable <- read_excel("~/Rprojects/Test_files/all_cells2-CleanTable.xlsx",
sheet = "Ratio")
dt_CCF <- shift_with_CCF(all_cells2_CleanTable, lower, upper, max_lag)
View(dt_CCF)
source("~/Rprojects/calcium_imaging_v2/engine.R")
dt_CCF <- shift_with_CCF(all_cells2_CleanTable, lower, upper, max_lag)
dt_CCF <- CCF_matrix(all_cells2_CleanTable, lower, upper, max_lag)
View(dt_CCF)
df_to_shift_alt <- all_cells2_CleanTable[, c('Time',
'cell-042',
'cell-049',
'cell-088',
'cell-117',
'cell-195',
'cell-228',
'cell-039')]
dt_CCF <- CCF_matrix(df_to_shift_alt, lower, upper, max_lag)
View(dt_CCF)
df_to_shift_alt <- all_cells2_CleanTable[, c('Time',
'cell-228',
'cell-042',
'cell-049',
'cell-088',
'cell-117',
'cell-195',
'cell-039')]
dt_CCF <- CCF_matrix(df_to_shift_alt, lower, upper, max_lag)
View(dt_CCF)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
